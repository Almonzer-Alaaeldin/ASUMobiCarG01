///////////////////////////////////////////Easy Driving Using Bluetooth Module & Line Tracking/////////////////////////////////////////

#include "stm32f10x.h"
#include "stm32f10x_rcc.h"
#include "stm32f10x_gpio.h"
#include "stm32f10x_gpio.h"             // Keil::Device:StdPeriph Drivers:GPIO
#include "stm32f10x_usart.h"
#include <string.h>
#include <math.h>

// Section 0: Defenitions and tuning
//char Hassanien;
class interpreter
{
  public:
    interpreter(char  inst , int  arg1 , int  arg2);
		interpreter(long cod);
		interpreter();
		long encode(char  inst , int  arg1 , int  arg2);
		bool decode(long cod , char &inst , int &arg1 , int &arg2);
		long encode();
		bool decode();
		long getCode();
		char getInst();
		int getArg1();
		int getArg2();
		bool putCode(long cod);
		bool putInst(char inst);
		bool putArg1(int arg1);
		bool putArg2(int arg2);
  private:
    long code;
		char instruction;
		int argument1;
		int argument2;
		int exchange(char inst   , bool  sign1 , bool  sign2);
		char exchange(int opcode , bool &sign1 , bool &sign2);
};
class threeBytes
{
  public:
    threeBytes(long instruction);
		threeBytes();
		long aquire();
		bool store(long instruction);
  private:
    unsigned char Byte1;
		unsigned char Byte2;
		unsigned char Byte3;
};
void PWM_Init(void);
void USART_Init(void);
void LED_init(void);
void USART2_PutChar(char c);
void USART2_PutString(char *s);
void PWMO_CH1_TIM2(int byte_Speed);
void moveCar(int movement , int turning);
int distance();
char * ReadUntil(char end);
void delay(int ms);
uint16_t USART2_GetChar(void);
int parseInt(char &zeyada);
void PWMO_CH1_TIM2(int byte_Speed);
void PWMO_CH1_TIM3(int byte_Speed);


bool lineTrc=0 , allowMove=0,accDrive=0,allowObst=0,valid=0,start=0;
int mov=0 , trn=0,Dis=0,Line_code=0,P=0,I=0,D=0,Last_TurnP=0,instruction_NUM=0,current_Index=0,Loop_Index=0;
float Turn_value=0;
interpreter trans;
//threeBytes str[10000];
char * Hassona=NULL;


int lineTRCPronto=40,DigiSpeed=80;
float Kp=12,Ki=0.02,Kd=27;
bool reverseDirection =0;

#define maxObst 9
#define maxBuff 5
#define HIGH 1
#define LOW 0


#define padSpeed 255
#define padTurn  255

#define USE GPIO_Pin_10
#define MLS GPIO_Pin_11
#define LS  GPIO_Pin_12
#define CS  GPIO_Pin_13
#define RS  GPIO_Pin_14
#define MRS GPIO_Pin_15
#define UST GPIO_Pin_0

#define ENA		GPIO_Pin_6
#define IN1		GPIO_Pin_7
#define IN2		GPIO_Pin_5
#define IN3		GPIO_Pin_9
#define IN4		GPIO_Pin_11
#define ENB		GPIO_Pin_10

// Section : Main Loop
int main(void)
{
	//int k=0;
	PWM_Init();
	USART_Init();
	LED_init();
	char Hassanien;
	while(1){
	Hassanien=USART2_GetChar();
	if(Hassanien=='N'){
GPIO_SetBits(GPIOA,GPIO_Pin_7);
GPIO_SetBits(GPIOA,GPIO_Pin_11);
GPIO_SetBits(GPIOA,GPIO_Pin_9);
GPIO_SetBits(GPIOA,GPIO_Pin_5);
GPIO_SetBits(GPIOC,GPIO_Pin_13);		
}else if(Hassanien=='S'){
GPIO_ResetBits(GPIOA,GPIO_Pin_7);
	GPIO_ResetBits(GPIOA,GPIO_Pin_11);
	GPIO_ResetBits(GPIOA,GPIO_Pin_9);
	GPIO_ResetBits(GPIOA,GPIO_Pin_5);
	GPIO_ResetBits(GPIOC,GPIO_Pin_13);
}
}
////	while(1){
////	for(k=0;k<7199;k++){
////	PWMO_CH1_TIM3(k);
////		PWMO_CH1_TIM2(k);
////		for(int ll=0;ll<610000;ll++);
////	}
////	for(k=7199;k>0;k--){
////	PWMO_CH1_TIM3(k);
////		PWMO_CH1_TIM2(k);
////		
////	}
////	for(int ll=0;ll<610000;ll++);
////	}
////	while(1)
////{char X=USART2_GetChar();
////	if(X=='S'){
////GPIO_SetBits(GPIOC,GPIO_Pin_13);
////	}else if(X=='R'){
////	
////	GPIO_ResetBits(GPIOC,GPIO_Pin_13);
////	}

////}

//		
//	while (1)
//	{
//		if(allowObst)
//  {
//    Dis=distance();   
//     //USART2_PutString("*X"+String(dis)+"*");    //displaying distance of nearest obstacle on the control device
//  }
//  
//  if(abs((float)Dis)<=maxObst&&allowObst==HIGH)        //obstacle avoidance feature
//  {
//    //Serial.print("*AR255G0B0*");      //sending an alarming signal to control device
//    moveCar(0,0);
//    while(abs((float)Dis)<=maxObst)
//    {
//      if(lineTrc==0)          //if line tracker mode is active the car will stop at obstacles else it will change its direction
//      {
//        moveCar(0,DigiSpeed);    //turn right
//        delay(500);             //for half a second
//        moveCar(0,0);           //stop 
//      }
//      else
//      {
//        moveCar(0,0);
//      }
//      Dis=distance();
//     // Serial.print("*X"+String(dis)+"*");
//      //if(Dis>maxObst)Serial.print("*AR0G0B0*");     //turning off the alarm signal before exiting the loop
//    } 
//  }

//  if (lineTrc==1)               //line tracker mode
//  {
//    
//      //treating the sensors readings as a binary value and converting into decimal
//    Line_code=GPIO_ReadInputData(GPIOB)/2048;
//    switch (Line_code)
//    {
//      case 1:                 //  0 0 0 0 1    ->    8
//       P=8;
//      break;

//      case 3:                 //  0 0 0 1 1    ->   6
//       P=6;
//      break;

//      case 2:                 //  0 0 0 1 0    ->   4
//       P=4;
//      break;

//      case 6:                 //  0 0 1 1 0    ->   2
//       P=2;
//      break;

//      case 4:                 //  0 0 1 0 0    ->   0
//       P=0;
//      break;

//      case 12:                //  0 1 1 0 0    ->   -2
//       P=-2;
//      break;

//      case 8:                 //  0 1 0 0 0    ->   -4
//       P=-4;
//      break;

//      case 24:                //  1 1 0 0 0    ->   -6
//       P=-6;
//      break;

//      case 16:                //  1 0 0 0 0    ->   -8
//       P=-8;
//      break;

//      case 0:                 //  0 0 0 0 0    ->   {-9,-7,-5,-3,-1,1,3,5,7,9}(depend on previous state)(intermidiate values for thin tracks)
//        if(P==-4||(P!=4&&D<0))P-=1;      //if it was left turn more left
//        else if(P==4||D>0)P+=1;           //if it was right turn more right
//      break;

//      default:
//       P=0;             // at conflict move straight
//      break;


//    }
//    P=P;                   //the proportional value is the current turn weight based on current sensor reading
//    I=I+P;                   //the integral value is the accumulation of all the previous turn weights (readings)
//    D=P-Last_TurnP;                //the differential value is the difference between current and last turn weights
//    Turn_value=(P*Kp)+(I*Ki)+(D*Kd);    //finally the turning value which will control the response of the car is the sum of all values
//    Last_TurnP=P;                //each multiplied by their respective weights
//    //Turn_value=constrain(Turn_value,-100,100);
//    if(allowMove==HIGH)
//    {moveCar(-1*lineTRCPronto,Turn_value);}

////    Serial.print("*p");
////    Serial.print(P);  //displaying current P on the control device
////    Serial.print("*");
////    Serial.print("*i");
////    Serial.print(I);  //displaying current I on the control device
////    Serial.print("*");
////    Serial.print("*d");
////    Serial.print(D);  //displaying current D on the control device
////    Serial.print("*");

//  }
//		Hassanien = USART2_GetChar();
//		if(lineTrc==0)
//		{
//		switch (Hassanien)
//		{
////			case 'X' :
////				trn=parseInt(Hassanien);
////			if(Hassanien=='Y')
////			{
////			  mov=parseInt(Hassanien);
////				moveCar(mov,trn);
////			}
////				
////			break;
//			
//			case 'N' :
//				moveCar(-1*padSpeed,0);
//			break;
//			
//			case 'S' :
//				moveCar(padSpeed,0);
//			break;
//			
//			case 'E' :
//				moveCar(0,padTurn);
//			break;
//			
//			case 'W' :
//				moveCar(0,-1*padTurn);
//			break;
//			
//			case 'R' :
//				moveCar(-1*padSpeed,padTurn);
//			break;
//			
//			case 'L' :
//				moveCar(-1*padSpeed,-1*padTurn);
//			break;
//			
//			case 'A' :
//				moveCar(padSpeed,padTurn);
//			break;
//			
//			case 'B' :
//				moveCar(padSpeed,-1*padTurn);
//			break;
//			
//			case 'M' :
//				moveCar(0,0);
//			break;
//			
//			case 'C' :
//				allowMove=0;
//				lineTrc=1;
//			break;
//			
//			default :
//				moveCar(0,0);
//			break;
//		
//		} 	
//		}
//else
//{
//	switch (Hassanien)
//	{
//		case 'c':
//			lineTrc=0;
//		allowMove=0;
//		moveCar(0,0);
//		break;
//		
//		case 'A' :
//			allowMove=1;
//		break;
//		
//		case 'a' :
//			allowMove=0;
//		moveCar(0,0);
//		break;
//	
//	}

//}	
//	}
}


// Section 2: Function Defenitions
  
	// 2-A: General Pins Configurations
char * ReadUntil(char end)
{
	int i=0;
	char check;
	char * string;
	
	while(1)
{
	check=USART2_GetChar();
	if(check!=end)break;
	string[i]=check;
	i++;
}

return string;
}
int distance()
{	int itr=0,ms=0;
	GPIO_ResetBits(GPIOB,UST);
	for(int q=0;q<11;q++);
	GPIO_SetBits(GPIOB,UST);
	for(int q=0;q<54;q++);
	GPIO_ResetBits(GPIOB,UST);
	for(int l=0;l<6540400;l++){
	if(GPIO_ReadInputDataBit(GPIOB,USE)){itr=l;break;}
	}
	ms=(itr*1000)/6540400;
	return (343*(ms/1000));
}
void delay(int ms)
{ int itr=(ms*6540400)/1000;
	for(int q=0;q<itr;q++);
}
void LED_init()
{
 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
	
	// UltraSonic Echo and Line Tracker Pins
	GPIO_InitTypeDef TRckSC;
	GPIO_InitTypeDef USC;
	GPIO_InitTypeDef LED13;
	GPIO_InitTypeDef Drive;
  
	//  B3 Not Functional
  // 5V	Tolerent  B4 B10 B11 B12 B13 B14 B15
	TRckSC.GPIO_Pin =GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15|GPIO_Pin_10|GPIO_Pin_11|GPIO_Pin_12;
	
	// All Previous Pins are Inputs Floating (Might Change!!!!!) 
	TRckSC.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	
	// Any Speed is good 
	TRckSC.GPIO_Speed = GPIO_Speed_2MHz;
	
	// Apply Changes to struct 
	GPIO_Init(GPIOB, &TRckSC); 

	// Ultrasonic's trigger pin B0
	USC.GPIO_Mode=GPIO_Mode_Out_PP;
  USC.GPIO_Pin=GPIO_Pin_0|GPIO_Pin_1;
	GPIO_Init(GPIOB,&USC);
	
	LED13.GPIO_Pin = GPIO_Pin_13;
	LED13.GPIO_Mode =GPIO_Mode_Out_PP;
	LED13.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOC, &LED13);
	Drive.GPIO_Mode=GPIO_Mode_Out_PP;
	Drive.GPIO_Pin=GPIO_Pin_11|GPIO_Pin_7|GPIO_Pin_5|GPIO_Pin_9;
	GPIO_Init(GPIOA,&Drive);
}

  // 2-B: Bluetooth USART Configurations
		
		// USART2 was chosen
void USART_Init()
{
	// structure Initialization
	
	USART_InitTypeDef USART2_Init;
	GPIO_InitTypeDef GPIOA_Init;
	
	// USART2 initialization
	
    // Initialize USART2 clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
	 
		//  Set Baud Rate 
	USART2_Init.USART_BaudRate = 9600;

		//	Not Needed
	USART2_Init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
		
		//	Set Transmit and Recieve Pins 	
	USART2_Init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
		
		//  Not Needed
	USART2_Init.USART_Parity = USART_Parity_No;
		
		//	Set 1 stop bit
	USART2_Init.USART_StopBits = USART_StopBits_1;
		
		//  Set transmited or recieved word to a byte of data
	USART2_Init.USART_WordLength = USART_WordLength_8b;
		
		//	Apply changes to Struct
	USART_Init(USART2, &USART2_Init);
		
		//	Turn on USART2
	USART_Cmd(USART2, ENABLE);
	
	// GPIO initialization for Tx and Rx pins
		
		//Initialize GPIOA Clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	
	  // Tx pin initialization as push-pull alternate function
	GPIOA_Init.GPIO_Pin = GPIO_Pin_2;
	GPIOA_Init.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIOA_Init.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOA, &GPIOA_Init);
	
	  
		// Rx pin initialization as input pull down 
	GPIOA_Init.GPIO_Pin = GPIO_Pin_3;
	GPIOA_Init.GPIO_Mode = GPIO_Mode_IPU;
	GPIOA_Init.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOA, &GPIOA_Init);
}
	// 2-C: Put Character to be transmited  
  void USART2_PutChar(char c)
{
	// Wait until transmit data register is empty
	while (!USART_GetFlagStatus(USART2, USART_FLAG_TXE));
	
	// Send a char using USART2 Tx
	USART_SendData(USART2, c);
}

	// 2-D: Transmit Array of Characters 

void USART2_PutString(char *s)
{
	while (*s)
	{
		USART2_PutChar(*s++);
	}
}

	// 2-E: Recive a Character
uint16_t USART2_GetChar()
{
	// Wait until data is received
	while (!USART_GetFlagStatus(USART2, USART_FLAG_RXNE));
	// Read received char
	return USART_ReceiveData(USART2);
}
// 2-F: PWM Timer configuration

void PWM_Init()
{
	// PWM Pin
	GPIO_InitTypeDef PWM1;
	
	// Tim struct initialization
	TIM_TimeBaseInitTypeDef TIM_Init;
	
	//Tim OC struct initialization
	TIM_OCInitTypeDef TIM_OC_Init;
	
	// Tim2 clock initialization 
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	
	TIM_Init.TIM_Prescaler = 10;
	
	// Frquency
	TIM_Init.TIM_Period = 7199; 
	
	TIM_Init.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_Init.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM2, &TIM_Init);
	
	TIM_Cmd(TIM2, ENABLE);
	
	TIM_OC_Init.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OC_Init.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OC_Init.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OC_Init.TIM_Pulse = 0;
	
	TIM_OC1Init(TIM2, &TIM_OC_Init);
	
	TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	
	PWM1.GPIO_Pin = GPIO_Pin_0;
	PWM1.GPIO_Mode = GPIO_Mode_AF_PP;
	PWM1.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOA, &PWM1);
	
	
	GPIO_InitTypeDef PWM2;
	
	// Tim struct initialization
	TIM_TimeBaseInitTypeDef TIM_Init1;
	
	//Tim OC struct initialization
	TIM_OCInitTypeDef TIM_OC_Init1;
	
	// Tim3 clock initialization 
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
	
	TIM_Init1.TIM_Prescaler = 10;
	
	// Frquency
	TIM_Init1.TIM_Period = 7199; 
	
	TIM_Init1.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_Init1.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM3, &TIM_Init1);
	
	TIM_Cmd(TIM3, ENABLE);
	
	TIM_OC_Init1.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OC_Init1.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OC_Init1.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OC_Init1.TIM_Pulse = 0;
	
	TIM_OC1Init(TIM3, &TIM_OC_Init1);
	
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	
	PWM2.GPIO_Pin = GPIO_Pin_6;
	PWM2.GPIO_Mode = GPIO_Mode_AF_PP;
	PWM2.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOA, &PWM2);

}
// 2-G: Speed mapping and application 
void PWMO_CH1_TIM2(int byte_Speed){
	
	if(byte_Speed<0)byte_Speed=0;
	if(byte_Speed>255)byte_Speed=255;
	// To facilitate the use for arduino users
  int Speed=(7199/255)*byte_Speed;
	
	// Apply PWM value
	TIM2->CCR1 = Speed;
}
void PWMO_CH1_TIM3(int byte_Speed){
	
	if(byte_Speed<90)byte_Speed=90;
	if(byte_Speed>255)byte_Speed=255;
	// To facilitate the use for arduino users
  int Speed=(7199/255)*byte_Speed;
	
	// Apply PWM value
	TIM3->CCR1 = Speed;
}


void moveCar(int movement , int turning)
{
	if(movement==0&&turning==0)
	{
		GPIO_ResetBits(GPIOA,IN1);
		GPIO_ResetBits(GPIOA,IN2);
		GPIO_ResetBits(GPIOA,IN3);
		GPIO_ResetBits(GPIOA,IN4);
		PWMO_CH1_TIM2(0);
		PWMO_CH1_TIM3(0);
	}
	
	if(movement>0)turning=-1*turning;
	int left=turning , right=-1*turning;
	left+=movement;
	right+=movement;
	
if(left<0)
{GPIO_SetBits(GPIOA,IN1);
GPIO_ResetBits(GPIOA,IN2);
left=-1*left;
}
else
{GPIO_SetBits(GPIOA,IN2);
GPIO_ResetBits(GPIOA,IN1);
}

if(right<0)
{GPIO_SetBits(GPIOA,IN3);
GPIO_ResetBits(GPIOA,IN4);
right=-1*right;
}
else
{GPIO_SetBits(GPIOA,IN4);
GPIO_ResetBits(GPIOA,IN3);
}
PWMO_CH1_TIM2(right);
PWMO_CH1_TIM3(left);

}

int parseInt(char &zeyada)
{
	char num[maxBuff];
	bool signedd=0 , termin=0;
	int i=0;
for(i=0;i<maxBuff;i++)
	{
		if(!USART_GetFlagStatus(USART2, USART_FLAG_RXNE))
		{
			termin=1;
			break;
		}
		num[i] =USART2_GetChar();
		if(i==0&&num[0]=='-')signedd=1;
		else if(num[i]<'0'||num[i]>'9')break;
	}
	if(!termin||i!=5)
	{
		zeyada=num[i];
		i-=1;
		}
	else zeyada='\0';
	
	if(signedd)i-=1;
	int value=0 , power=1;
	for(int j=0 ; j<i+1;j++)
	{
		power=1;
		for(int k =0 ; k<j ; k++ )
		{
			power=power*10;
		}
		value+=(num[i+signedd-j]-48)*power;
	}
	if(signedd)value=-1*value;
	return value;

}
int interpreter:: exchange(char inst , bool sign1 , bool sign2)
{									//private function takes character of instruction and signs of arguments and supplies op-code for it
	switch (inst)
	{
		case 'L' :		//line instruction
			return 0+sign1*2+sign2*1;
		
		
		case 'A' :		//arc instruction
			return 4+sign1*2+sign2*1;
		
		
		case 'R' :		//repeat instruction
			return 8+sign2*1;
		
		
		case 'D' :		//stop instruction
			return 10;
		
		
		case 'B' :		//Bezier curve instruction(under development)
			return 11+sign1*2+sign2*1;
		
	}
	return 100;			//for error detection
}

char interpreter:: exchange(int opcode , bool &sign1 , bool &sign2)
{									//private function takes op-code of instruction and supplies instruction character and signs of arguments
	char inst;
	if(opcode>=0&&opcode<=3)
	{
		inst='L';
		opcode-=0;
	}
	else if(opcode>=4&&opcode<=7)
	{
		inst='A';
		opcode-=4;
	}
	else if(opcode==8||opcode==9)
	{
		inst='R';
		opcode-=8;
	}
	else if(opcode==10)
	{
		inst='D';
		opcode-=10;
	}
	else if(opcode>=11&&opcode<=14)
	{
		inst='B';
		opcode-=11;
	}
	switch(opcode)
	{
		case 0:
			sign1=0;
			sign2=0;
			return inst;
		
		
		case 1:
			sign1=0;
			sign2=1;
			return inst;
		
		
		case 2:
			sign1=1;
			sign2=0;
			return inst;
		
		
		case 3:
			sign1=1;
			sign2=1;
			return inst;
		
	}
	return '\0';			//for error detection
}

interpreter::interpreter()
{
	code=0;
	instruction='\0';
	argument1=0;
	argument2=0;
}

long interpreter::encode(char  inst , int  arg1 , int  arg2)
{
	instruction =inst;
	argument1=arg1;
	argument2=arg2;
	bool sign1 , sign2;
	if(arg1<0)
	{
		sign1=1;
		arg1*=-1;
	}
	else
	{
		sign1=0;
	}
	if(arg2<0)
	{
		sign2=1;
		arg2*=-1;
	}
	else
	{
		sign2=0;
	}
	code=exchange(inst,sign1,sign2)*1000000+arg1*1000+arg2;
	return code;
}

bool interpreter::decode(long cod , char &inst , int &arg1 , int &arg2)
{
	code = cod;
	bool sign1 , sign2;
	int opcode=cod/1000000;
	arg1=cod/1000%1000;
	arg2=cod%1000;
	inst=exchange(opcode,sign1,sign2);
	if(inst=='\0')return 0;
	instruction=inst;
	if(sign1)arg1*=-1;
	if(sign2)arg2*=-1;
	argument2=arg2;
	argument1=arg1;
	return 1;
}

interpreter::interpreter(char  inst , int  arg1 , int  arg2)
{
	instruction=inst;
	argument1=arg1;
	argument2=arg2;
	code=encode(instruction,argument1,argument2);
}

interpreter::interpreter(long cod)
{
	code=cod;
	char inst=instruction;
	int arg1=argument1 , arg2=argument2;
	decode(code , inst , arg1 , arg2);
}

long interpreter::encode()
{
	code=encode(instruction,argument1,argument2);
	return code;
}

bool interpreter::decode()
{
	bool ret;
	char inst=instruction;
	int arg1=argument1 , arg2=argument2;
	ret=decode(code , inst , arg1 , arg2);
	return ret;
	
}

long interpreter::getCode()
{return code;}

char interpreter::getInst()
{return instruction;}

int interpreter::getArg1()
{return argument1;}

int interpreter::getArg2()
{return argument2;}

bool interpreter::putCode(long cod)
{
	if (cod>=16000000)
	{
		code=0;
		return 0;
	}
	code=cod;
	return 1;
}

bool interpreter::putInst(char inst)
{
	if (!(inst=='L'||inst=='A'||inst=='R'||inst=='D'||inst=='B'))
	{
		instruction='\0';
		return 0;
	}
	return 1;
}

bool interpreter::putArg1(int arg1)
{
	if (arg1>=1000||arg1<+-1000)
	{
		argument1=0;
		return 0;
	}
	argument1=arg1;
	return 1;
}

bool interpreter::putArg2(int arg2)
{
	if (arg2>=1000||arg2<+-1000)
	{
		argument2=0;
		return 0;
	}
	argument2=arg2;
	return 1;
}
threeBytes::threeBytes(long instruction)
{
  if(instruction>=16000000)
	{
		Byte1=0;
		Byte2=0;
		Byte3=0;
	}
	else
	{
		Byte3=instruction%256;
		instruction/=256;
		Byte2=instruction%256;
		instruction/=256;
		Byte1=instruction%256;
	}
}
threeBytes::threeBytes()
{
	Byte1=0;
	Byte2=0;
	Byte3=0;
}


long threeBytes::aquire()
{
  return Byte1*256*256+Byte2*256+Byte3;
}

bool threeBytes::store(long instruction)
{
	
	if(instruction>=16000000)
	{
		return 0;
	}
	else
	{
	 Byte3=instruction%256;
	 instruction/=256;
	 Byte2=instruction%256;
	 instruction/=256;
	 Byte1=instruction%256;
	}
	return 1;
}
