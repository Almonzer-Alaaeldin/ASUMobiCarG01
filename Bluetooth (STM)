#include "stm32f10x.h"
#include "stm32f10x_rcc.h"
#include "stm32f10x_gpio.h"
#include "stm32f10x_usart.h"
#include <string.h>

void USART2_Init(void);
void USART2_PutChar(char c);
void USART2_PutString(char *s);

#define BUF_SIZE	16
char buf[BUF_SIZE];

void USART2_IRQHandler()
{
	
	if (USART_GetITStatus(USART2, USART_IT_RXNE))
	{
		
		static uint8_t i = 0;
		
		
		char c = USART_ReceiveData(USART2);
		
	
		if (c != '\n')
		{
			if (i < BUF_SIZE - 1)
			{
				buf[i] = c;
				i++;
			}
			else
			{
				buf[i] = c;
				i = 0;
			}
		}
		else
		{			
			
			USART2_PutString(buf);
			USART2_PutChar('\n');
			
	
			memset(&buf[0], 0, sizeof(buf));
			i = 0;
		}
	}
}

int main(void)
{
	// Initialize USART with receive interrupt
	USART2_Init();
	
	while (1)
	{
	}
}

void USART2_Init()
{
	
	USART_InitTypeDef USART_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;
	
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
	USART_InitStruct.USART_BaudRate = 9600;
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_InitStruct.USART_Parity = USART_Parity_No;
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
	USART_Init(USART2, &USART_InitStruct);
	USART_Cmd(USART2, ENABLE);
	
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOA, &GPIO_InitStruct);
	
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOA, &GPIO_InitStruct);
	

	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
	
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
	
	NVIC_SetPriority(SysTick_IRQn, 0);
	
	NVIC_InitStruct.NVIC_IRQChannel = USART2_IRQn;
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStruct);
}

void USART2_PutChar(char c)
{
	
	while (!USART_GetFlagStatus(USART2, USART_FLAG_TXE));
	
	USART_SendData(USART2, c);
}

void USART2_PutString(char *s)
{
	
	while (*s)
	{
		USART2_PutChar(*s++);
	}
}
////////////////////////////// PWM part (to be integrated) //////////////////////////

#include "stm32f10x.h"
#include "stm32f10x_rcc.h"
#include "stm32f10x_gpio.h"
#include "stm32f10x_tim.h"


void PWM_Init(void);

int main(void)
{
	PWM_Init();
	
	while (1)
	{int Speed;
		for(Speed=0;Speed<7199;Speed++){
		
		TIM2->CCR1 = Speed;
		for(int i=0;i<15000;i++);
		}
		for(Speed=7199;Speed>0;Speed--){
		
		TIM2->CCR1 = Speed;
		for(int i=0;i<15000;i++);
		}
		
	}
}

void PWM_Init()
{
	GPIO_InitTypeDef PWM;
	
	TIM_TimeBaseInitTypeDef TIM_Init;
	
	TIM_OCInitTypeDef TIM_OC_Init;
	
	
	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	
	TIM_Init.TIM_Prescaler = 10;
	TIM_Init.TIM_Period = 7199; // Frquency;
	TIM_Init.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_Init.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM2, &TIM_Init);
	
	TIM_Cmd(TIM2, ENABLE);

	
	TIM_OC_Init.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OC_Init.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OC_Init.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OC_Init.TIM_Pulse = 0;
	
	TIM_OC1Init(TIM2, &TIM_OC_Init);
	
	TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
	
	

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	
	PWM.GPIO_Pin = GPIO_Pin_0;
	PWM.GPIO_Mode = GPIO_Mode_AF_PP;
	PWM.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOA, &PWM);
}
