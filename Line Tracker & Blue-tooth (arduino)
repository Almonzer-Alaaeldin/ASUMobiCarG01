#include <interpreter.h>
#include <threeBytes.h>
#include <EEPROM.h>

float Pweight=6 , Iweight=0.02 , Dweight=27;   //These are the weights for every value in PID method used in line tracker to be tunned
#define maxObst     15             //for tuning max obstacle distance in cm
#define spedSound 0.0343           //speed of sound in cm/us

#define carWidth  11.35       //car width for accurate driving(in cm)
#define stepdis    5184           //resolution of disk encoder (in cm*10000)
#define pi         3.1415926535 //value of pi 
#define MaxInstruc 300
#define MaxEEPROM  300

int  digisped=255;               //for keypad speed and turning
bool reverseDirections=0;    

#define LmotorFor       2  //IN1       l298n   motor drive module
#define LmotorBac       3  //IN2
#define LmotorSpe       5  //EN1          
#define RmotorFor       4  //IN3
#define RmotorBac       7  //IN4
#define RmotorSpe       6  //EN2

#define trigUltra       8  //ultra sonic module trigger pin
#define echoUltra       9  //ultra sonic module echo pin

#define phot_ntrpt_l   18  
#define phot_ntrpt_r   17

#define lineTrcVL      19      //the very left //we can use analog pins as digital pins by using numbers from 14-19
#define lineTrcL       10      //the left 
#define lineTrcM       11      //the middle line track sensor
#define lineTrcR       12      //the right 
#define lineTrcVR      13      //the very right

#define Battery1        0
#define Battery2        1
#define BatteryAll      2    

int mov=0 , trn=0 ; //for movement
int dis=0  ; //for ultrasonic sensor
char reading=0 ;  //for blue-tooth readings
char statMov='\0';	//state of car movement to detect change in directions for starting up the motor
bool lineTrc =0  , accDrive=1 , allow=0   , allowObst=0;  //flag for modes , allowing movement , allowing obstacle avoidance
int lineTrcTurn=0 , turnWeight=0 , lastTurn=0;
int P=0 , I=0 , D=0 ;   //using the PID method to increase efficiency of line tracking
float  turnValue=0;   
unsigned char avgTurns[100];
int sumTurns=0 , ndex=0;
  
int BatteryLevel1,BatteryLevel2 , Battery , col;        //Batteries ,   col=>indicator color
bool Bat1 , Bat2;
interpreter trans;
threeBytes stor[MaxInstruc];
String readin="";
bool valid=0 ;
int instructionNum=0 , currentIndex=0 ;
int instructionsEEPROM=0 , currentEEPROM=0 ;

 

void moveCar(int movement , int turning) //takes  movement and turning , the analog stick is reversed in the y direction in the app, up is negative and down is positive
{  
  if(reverseDirections)
  {
    movement*=-1;
    if(movement!=0)turning*=-1;
  }                                     //positive for backward movement and right turning  negative for forward movement and left turning
  if(movement==0&&turning==0)
  {
    digitalWrite(LmotorFor,LOW);
    digitalWrite(LmotorBac,LOW);  //all pins LOW to stop the car and conserve power
    digitalWrite(LmotorSpe,LOW);
    digitalWrite(RmotorFor,LOW);
    digitalWrite(RmotorBac,LOW);
    digitalWrite(RmotorSpe,LOW);
		statMov='\0';
  }
  else
  {
    int left=0 ,right=0 ;       //speed of each wheel
    bool forL=LOW , forR=LOW;     //Direction of each wheel
    if(movement>0)
    {
      turning = -1*turning;     //when moving backwards the turning value is reversed
    }
    right=movement+turning;					
    left =movement-turning;					
    // left=left+ movement;      
    // right=right+movement;
    if (right<0)          //test for negative values to determine direction then make them positive for using
    {
      forR=HIGH;
      right=0-right;
			if(statMov!='a'&&statMov!='c')statMov='\0';
    } 
    else 
		{
			forR=LOW;
			if(statMov!='b'&&statMov!='d')statMov='\0';
    }
		if (left<0)
    {
      forL=HIGH;
      left=0-left;
			if(statMov!='a'&&statMov!='b')statMov='\0';
    }
    else 
		{
			forL=LOW;
			if(statMov!='c'&&statMov!='d')statMov='\0';
    }
// 		left*=error_value;
//    right=map(right,0,100,0,255); 
//    left=map(left,0,100,0,255);
    left=constrain(left,0,255);
    right=constrain(right,0,255);
    
// 	Serial.print("*C"+String(left)+"*");
// 	Serial.print("*E"+String(right)+"*");
    digitalWrite(LmotorFor,forL);
    digitalWrite(LmotorBac,!forL);
    digitalWrite(RmotorFor,forR);
    digitalWrite(RmotorBac,!forR);
		if(statMov=='\0')
		{
			analogWrite(LmotorSpe,255);
			analogWrite(RmotorSpe,255);
			delay(10);
			statMov=('a'+(!forL*2)+(!forR*1));
		}
    analogWrite(LmotorSpe,left);
    analogWrite(RmotorSpe,right);
  }
}

int obstEcho()          //the generic code for the ultrasonic module
{
  int tim=0;
  digitalWrite(trigUltra, LOW);
  delayMicroseconds(2);
  digitalWrite(trigUltra, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigUltra, LOW);
  tim= pulseIn(echoUltra, HIGH);
  return tim;
}

void BatteryIndicate()
{
  BatteryLevel1=map(analogRead(Battery1),0,1024,0,500);
  BatteryLevel2=map(analogRead(Battery2),0,1024,0,500);
  Battery=map(analogRead(BatteryAll),0,945,0,850);
  Bat1=(BatteryLevel1<=280);
  Bat2=(BatteryLevel2<=280);
  Serial.print("*B"+String(Battery)+"**L"+String(BatteryLevel1)+"**l"+String(BatteryLevel2)+"*");
  col=255*Bat1;
  Serial.print("*HR"+String(col)+"G0B0*");
  col=255*Bat2;
  Serial.print("*hR"+String(col)+"G0B0*");
}
String removeAllWhite(String arg)
{
    int j=0 , l=arg.length();
    for (int i=0;i<l;i++)
    {
        if(arg[i]==' ')
        {
            if(i!=0)j=i;
            while((arg[i]==' '||arg[i]=='\t')&&i<l)i++;

            arg=arg.substring(0,j)+arg.substring(i,l-1);
            l=arg.length();

            i-=i-j;
        }
    }
    return arg;
}

/*int findChar( String arg , char fnd)
{
  int l=arg.length();
  for(int i=0;i<l/2;i++)
  {
    if(arg[i]==fnd)return i;
    else if(arg[l-i-1]==fnd)return l-i-1;
  }
  return 0;
}*/


bool lin(int dist)
{
	if(dist==0)return 0;
	bool st1 =digitalRead(phot_ntrpt_l);
	bool st2 =digitalRead(phot_ntrpt_r);
	bool ls1 =st1 , ls2 =st2 , backw=(dist<0);

  //dist=(float)dist*0.94;
	dist-=5;
	if(backw)dist*=-1;
	
	int i=0 , j=0;
  if(backw)
	{
		digisped=146;
		dist-=10;
	}
	else digisped=-146;
	//int turnn=-40;
	moveCar(digisped, 45);
	while(((long)i* stepdis <(long)dist*10000)&&((long)j* stepdis <(long)dist*10000))
	{
		st1= digitalRead(phot_ntrpt_l);
		st2= digitalRead(phot_ntrpt_r);
		if((st1&&!ls1)||(!st1&&ls1))
		{
			i++;
			ls1=st1;
		}
		if((st2&&!ls2)||(!st2&&ls2))
		{
			j++;
			ls2=st2;
		}
//		 if(i%20==0 && i!=j)
//		 {
//			 moveCar(digisped, (j-i));
//		 }
	}
	moveCar(0,0);

	return 1;
}

bool ang(int angl)
{
	if(angl==0)return 0;
	bool st1 =digitalRead(phot_ntrpt_l);
	bool st2 =digitalRead(phot_ntrpt_r);
	bool ls1 =st1 , ls2 =st2 , antclk=(angl<0);
	
	angl=(float)((float)angl*carWidth*pi)/360.0;
	angl=(float)angl*2.45;
	if(antclk)angl*=-1;
	
	int i=0 , j=0;
  if(antclk)digisped=230;
  else digisped=-230;
  moveCar( 0,digisped);
  // Serial.print(angl);
  // Serial.print("\n");
	while(((long)i* stepdis <(long)angl*10000)&&((long)j* stepdis <(long)angl*10000))
	{
  Serial.print(i);
  Serial.print("\n");
		st1= digitalRead(phot_ntrpt_l);
		st2= digitalRead(phot_ntrpt_r);
		if((st1&&!ls1)||(!st1&&ls1))
		{
			i++;
			ls1=st1;
		}
		if((st2&&!ls2)||(!st2&&ls2))
		{
			j++;
			ls2=st2;
		}
		 /*if(i%20==0 && i!=j)
		 {
			 moveCar((j-i) ,digisped);
		 }*/
	}
	moveCar(0,0);

	return 1;
}

bool arc(int rad , int theta)
{
  if(rad==0&&theta==0)return 0;
	
	else if(rad==0)
	{
		return ang(theta);
	}
	int angles=12;
  if(rad<0)
  {
    rad*=-1;
    angles*=-1;
  }
	
	int distances=-1*rad*sin(6);
  if(theta<0)
  {
    theta*=-1;
    distances*=-1;
  }
	
	int i=0;
	while(i<(theta/12)+1)
	{
		lin(distances);
   delay(100);
		ang(angles);
   delay(100);
		i++;
	}
	lin(distances*(theta%12)/12);
	
	return 1;
}

bool execute(interpreter instr)
{
  switch (instr.getInst())
  {
    case 'L' :
      arc(0,instr.getArg2());
      lin(instr.getArg1());
    break;
    
    case 'A' :
      arc(instr.getArg1(),instr.getArg2());
    break;
    
    case 'D' :
      delay(instr.getArg2()*1024+instr.getArg1());
    break;
    
    case 'R' :
      int start_cond , end_cond , end_value;
      if(instr.getArg1()>0)
      {
        start_cond=currentIndex+1;
        end_cond=currentIndex+instr.getArg1()+1;
				end_value=currentIndex+instr.getArg1();
      }
      else
      {
        start_cond=currentIndex+instr.getArg1();
        end_cond=currentIndex;
				end_value=currentIndex;
      }
      for(int j=0 ; j<instr.getArg2 ; j++)
      {
        for(int i=start_cond;i<end_cond;i++)
        {
          instr.putCode(stor[i].aquire());
          instr.decodeit();
          execute[instr];
        }
      }
      currentIndex=end_value;
      break;
    
    default:
      return 0;
    break;
    
  }
  return 1;
}

void setup() 
{
  for (int i=0;i<MaxInstruc;i++);
  {
    stor[i].store(0);
		if(i<100)avgTurns[i]=0;
  }
  Serial.begin(9600);
  pinMode(LmotorFor,OUTPUT);
  pinMode(LmotorBac,OUTPUT);
  pinMode(LmotorSpe,OUTPUT);
  pinMode(RmotorFor,OUTPUT);
  pinMode(RmotorBac,OUTPUT);
  pinMode(RmotorSpe,OUTPUT);

  pinMode(trigUltra,OUTPUT);
  pinMode(echoUltra,INPUT);

  pinMode(lineTrcVL,INPUT);
  pinMode(lineTrcL,INPUT);
  pinMode(lineTrcM,INPUT);
  pinMode(lineTrcR,INPUT);
  pinMode(lineTrcVR,INPUT);

  pinMode(phot_ntrpt_l,INPUT);
  pinMode(phot_ntrpt_r,INPUT);

}

void loop() 
{
  if(!accDrive)BatteryIndicate();
  if(allowObst)
  {
    dis=obstEcho()*spedSound/2;   
    Serial.print("*X"+String(dis)+"*");    //displaying distance of nearest obstacle on the control device
  }
  
  if (abs(dis)<=maxObst&&allowObst==HIGH)        //obstacle avoidance feature
  {
    Serial.print("*AR255G0B0*");      //sending an alarming signal to control device
    moveCar(0,0);
    while(abs(dis)<=maxObst)
    {
      if(lineTrc==0)          //if line tracker mode is active the car will stop at obstacles else it will change its direction
      {
        moveCar(0,digisped);    //turn right
        delay(500);             //for half a second
        moveCar(0,0);           //stop 
      }
      else
      {
        moveCar(0,0);
      }
      dis=obstEcho()*spedSound/2;
      Serial.print("*X"+String(dis)+"*");
      if(dis>maxObst)Serial.print("*AR0G0B0*");     //turning off the alarm signal before exiting the loop
    } 
  }

  if (lineTrc==1 && accDrive==0)               //line tracker mode
  {
    
      //treating the sensors readings as a binary value and converting into decimal
    lineTrcTurn=(digitalRead(lineTrcVL))*16+(digitalRead(lineTrcL))*8+(digitalRead(lineTrcM))*4+(digitalRead(lineTrcR))*2+(digitalRead(lineTrcVR));
    switch (lineTrcTurn)
    {
      case 1:                 //  0 0 0 0 1    ->    4
        turnWeight=4;
      break;

			case 7:									//	0 0 1 1 1    
      case 3:                 //  0 0 0 1 1    ->    3
        turnWeight=3;
      break;

      case 2:                 //  0 0 0 1 0    ->    2
        turnWeight=2;
      break;

      case 6:                 //  0 0 1 1 0    ->    1
        turnWeight=1;
      break;

      case 14:								//	0 1 1 1 0    
      case 4:                 //  0 0 1 0 0    ->    0
        turnWeight=0;
      break;

      case 12:                //  0 1 1 0 0    ->   -1
        turnWeight=-1;
      break;

      case 8:                 //  0 1 0 0 0    ->   -2
        turnWeight=-2;
      break;

      case 28:								//	1 1 1 0 0    
      case 24:                //  1 1 0 0 0    ->   -3
        turnWeight=-3;
      break;

      case 16:                //  1 0 0 0 0    ->   -4
        turnWeight=-4;
      break;

      case 0:                 //  0 0 0 0 0    ->   -6 , 6 or constant turning until read
        if(turnWeight==-4)turnWeight=-6;      //if it was left turn more left
        else if(turnWeight==4) turnWeight=6;           //if it was right turn more right
				else
				{
					while(lineTrcTurn==0)
					{
						moveCar(-1*digisped,(sumTurns/100));
						lineTrcTurn=(digitalRead(lineTrcVL))*16+(digitalRead(lineTrcL))*8+(digitalRead(lineTrcM))*4+(digitalRead(lineTrcR))*2+(digitalRead(lineTrcVR));
					}
				}
      break;

      default:
        turnWeight=0;             // at conflict move straight
      break;


    }
    P=turnWeight;                   //the proportional value is the current turn weight based on current sensor reading
    I=I+turnWeight;                   //the integral value is the accumulation of all the previous turn weights (readings)
    D=turnWeight-lastTurn;                //the differential value is the difference between current and last turn weights
    turnValue=(P*Pweight)+(I*Iweight)+(D*Dweight);    //finally the turning value which will control the response of the car is the sum of all values
    sumTurns-=avgTurns[ndex];
		avgTurns[ndex]=turnValue;
		sumTurns+=avgTurns[ndex];
		ndex=(ndex+1)%100;
		
		lastTurn=turnWeight;                //each multiplied by their respective weights
    turnValue=constrain(turnValue,-100,100);
    if(allow==HIGH)
    {moveCar(-1*digisped,turnValue);}

    Serial.print("*p");
    Serial.print(P);  //displaying current P on the control device
    Serial.print("*");
    Serial.print("*i");
    Serial.print(I);  //displaying current I on the control device
    Serial.print("*");
    Serial.print("*d");
    Serial.print(D);  //displaying current D on the control device
    Serial.print("*");

  }

  if (Serial.available()>0)     //blue-tooth mode
  {
    reading=Serial.read();
    if(lineTrc==0&&accDrive==0)
    {
      switch (reading)
      {
        case 'X' :    //the analog pad reading send   X....Y....
          trn=Serial.parseInt();
          reading=Serial.read();
          if(reading=='Y')
          {
            mov=Serial.parseInt();
						// while(Serial.available())
						// {
							// reading=Serial.read();
							// if(reading=='x')
							// {
								// trn=Serial.parseInt();
								// reading=Serial.read();
								// if(reading=='Y')mov=Serial.parseInt();
							// }
							// else break;
						// }
            moveCar(mov,trn);
          }
        break;

        case 'N' :    //keypad button up
          moveCar(-1*digisped,0);
        break;

        case 'S' :    //keypad button down
          moveCar(digisped,0);
        break;

        case 'E' :    //keypad button right
          moveCar(0,digisped);
        break;

        case 'W' :    //keypad button left
          moveCar(0,-1*digisped);
        break;

        case 'R' :    //keypad button up right
          moveCar(-1*digisped,digisped);
        break;

        case 'L' :    //keypad button up left
          moveCar(-1*digisped,-1*digisped);
        break;

        case 'A' :    //keypad button down right 
          moveCar(digisped,digisped);
        break;

        case 'B' :    //keypad button down left 
          moveCar(digisped,-1*digisped);
        break;

        case 'M' :    //keypad button release and brake button
          moveCar(0,0);
        break;

        case 'C' :    //line tracker activator
          digisped=180;
					accDrive=0;
          lineTrc=1;
          moveCar(0,0);
          Serial.print("*P");
          Serial.print(Pweight);  //displaying current Pweight on the control device
          Serial.print("*");
          Serial.print("*I");
          Serial.print(Iweight);  //displaying current Iweight on the control device
          Serial.print("*");
          Serial.print("*D");
          Serial.print(Dweight);  //displaying current Dweight on the control device
          Serial.print("*");
          Serial.print("*S");
          Serial.print(digisped); //displaying current speed on the control device
          Serial.print("*");
        break;
        
        case 'O':       //for  turning on obstacle avoidance
          allowObst=HIGH;
        break;
      
        case 'o':       //for  turning off obstacle avoidance
          allowObst=LOW;
        break;
        
        case 'Q' :    //Accurate driving mode
          Serial.print("\nGoing to accurate drive mode.\nBattery indication disabled.\n");
					accDrive=1;
          lineTrc=0;
        break;
        
        case 'J':
          digisped=Serial.parseInt();
          Serial.print("*j"+String(digisped)+"*");
        break;
        
        case 'V' :    //Accurate driving mode
          reverseDirections=1;
        break;

        case 'v' :    //Accurate driving mode
          reverseDirections=0;
        break;
        
        default :
          moveCar(0,0);
        break;
      }
    }
    else if(lineTrc==1&&accDrive==0)
    {
      switch (reading)
      {
        case 'c':
					digisped=255;
          lineTrc=0;
          moveCar(0,0);
          P=0;
          I=0;
          D=0;
        break;
        
        case 'Q' :    //Accurate driving mode
          Serial.print("\nGoing to accurate drive mode.\nBattery indication disabled.\n");
					accDrive=1;
          lineTrc=0;
        break;
        
        case 'Z':
          allow=HIGH;
        break;
        
        case 'z':
          moveCar(0,0);
          allow=LOW;
        break;

        case 'r':       //for  resetting values
          P=0;
          I=0;
          D=0;
        break;
        
        case 'P':       //for tuning Pweight on the fly
          Pweight=Serial.parseFloat();
          Serial.print("*P");
          Serial.print(Pweight);  //displaying current Pweight on the control device
          Serial.print("*");
        break;

        case 'I':       //for tuning Iweight on the fly
          Iweight=Serial.parseFloat();
          Serial.print("*I");
          Serial.print(Iweight);  //displaying current Iweight on the control device
          Serial.print("*");
        break;

        case 'D':       //for tuning Dweight on the fly
          Dweight=Serial.parseFloat();
          Serial.print("*D");
          Serial.print(Dweight);  //displaying current Dweight on the control device
          Serial.print("*");
        break;

        case 's':       //for tuning speed on the fly
          digisped=Serial.parseInt();
          digisped=constrain(digisped,-100,100);
          Serial.print("*S");
          Serial.print(digisped); //displaying current speed on the control device
          Serial.print("*");
        break;
      }

    }
    else if(accDrive==1&&lineTrc==0)    //accurate drive mode
    {
      switch (reading)
      {
        case 'q' :    //Accurate driving mode
          digisped=255;
					accDrive=0;
					lineTrc=0;
          Serial.print("Going to easy drive mode.\n");
        break;

        case 'C' :    //line tracker activator
          digisped=180;
					Serial.print("Going to line tracker mode.\n");
          accDrive=0;
          lineTrc=1;
          moveCar(0,0);
          Serial.print("*P");
          Serial.print(Pweight);  //displaying current Pweight on the control device
          Serial.print("*");
          Serial.print("*I");
          Serial.print(Iweight);  //displaying current Iweight on the control device
          Serial.print("*");
          Serial.print("*D");
          Serial.print(Dweight);  //displaying current Dweight on the control device
          Serial.print("*");
          Serial.print("*S");
          Serial.print(digisped); //displaying current speed on the control device
          Serial.print("*");
        break;
        
        case 't' :
					Serial.print("Read mode enabled.\n");
					flag=0;
          while(!flag)
					{
						if(Serial.available())
						{
							reading=Serial.read();
							if(reading<='z'&&reading>='a')reading-=('a'-'A'); //to uppercase
							switch (reading)
							{
								case 'J':		//start button
								case 'T':		//read enable switch off
								{
									flag=1;
									Serial.print(" leaving read mode.\n");
                  if(reading=='J')goto starting;
									Serial.flush();
									continue;
								}
								break;
								
								case 'L':		//line instruction
								case 'A':		//Arc instruction
								case 'R':		//Repeat instruction
								{
									Serial.print(trans.putInst(reading));
									if(!trans.putArg1(Serial.parseInt()))
									{
										Serial.print("Argument1 not valid.\n");
										valid=0;
										continue;
									}
									if(!trans.putArg2(Serial.parseInt()))
									{
										Serial.print("Argument2 not valid.\n");
										valid=0;
										continue;
									}
									else 
									{
										Serial.print("OK\n");
										if(instructionNum<MaxInstruc)
										{
											Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
											stor[instructionNum++].store(trans.encode());
											Serial.print("instruction  saved\n");
										}
										else
										{
											Serial.print("Maximum instructions reached\ninstruction not saved\n");
										}
									}
									Serial.flush();
								}
								break;
								
								case 'D':		//Repeat instruction
								{
									trans.putInst(reading);
									m_sec=(long)Serial.parseInt();
									trans.putArg1(m_sec%1024);
									if(!trans.putArg2(m_sec/1024))
									{
										Serial.print("Argument not valid.\n");
										valid=0;
										continue;
									}
									else 
									{
										Serial.print("OK\n");
										if(instructionNum<MaxInstruc)
										{
											Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
											stor[instructionNum++].store(trans.encode());
											Serial.print("instruction  saved\n");
										}
										else
										{
											Serial.print("Maximum instructions reached\ninstruction not saved\n");
											continue;
										}
									}
									Serial.flush();
								}
								break;
								
								case 'I':		//infinity shape instruction
								{
									int arg1=Serial.parseInt();
									int arg2=Serial.parseInt();
									bool negat=0;
									if(arg1<0)
									{
										negat=!negat;
										arg1*=-1;
									}
									if(arg2<0)
									{
										negat=!negat;
										arg2*=-1;
									}
									float alpha=2.0*acos((float)(-2*arg2)/(float)arg1);
									int l=(int)(arg1*sin((float)alpha/2));
									alpha=alpha*180.00/pi;
									if(l>=1024||alpha>=1024)
									{
										Serial.print("Arguments not Valid.\n");
										continue;
									}
									else
									{
										Serial.print("OK\n");
										if(instructionNum+4<MaxInstruc)
										{
											Serial.print("instruction  saved\n");
										}
										else
										{
											Serial.print("Maximum instructions reached\ninstruction not saved\n");
											continue;
										}
										if(negat)arg2*=-1;
										trans.putInst('A');
										trans.putArg1(arg2);
										trans.putArg2(alpha/2);
										Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
										stor[instructionNum++].store(trans.encode());
										trans.putInst('L');
										trans.putArg1(l);
										trans.putArg2(0);
										Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
										stor[instructionNum++].store(trans.encode());
										trans.putInst('A');
										trans.putArg1(-1*arg2);
										trans.putArg2(alpha);
										Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
										stor[instructionNum++].store(trans.encode());
										trans.putInst('L');
										trans.putArg1(l);
										trans.putArg2(0);
										Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
										stor[instructionNum++].store(trans.encode());
										trans.putInst('A');
										trans.putArg1(arg2);
										trans.putArg2(alpha/2);
										Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
										stor[instructionNum++].store(trans.encode());
									}
								}
								break;
								
								case 'G':		//rectangle instruction
								{
									int arg1=Serial.parseInt();
									int arg2=Serial.parseInt();
									if(!trans.putArg1(arg1)||!trans.putArg2(arg2))
									{
										Serial.print("Arguments not Valid.\n");
										continue;
									}
									else if(arg1==arg2)
									{
										Serial.print("OK\n");
										if(instructionNum+2<MaxInstruc)
										{
											Serial.print("instruction  saved\n");
										}
										else
										{
											Serial.print("Maximum instructions reached\ninstruction not saved\n");
											continue;
										}
										trans.putInst('R');
										trans.putArg1(1);
										trans.putArg2(4);
										Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
										stor[instructionNum++].store(trans.encode());
										trans.putInst('L');
										trans.putArg1(arg1);
										trans.putArg2(90);
										Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
										stor[instructionNum++].store(trans.encode());
									}
									else
									{
										Serial.print("OK\n");
										if(instructionNum+1<MaxInstruc)
										{
											Serial.print("instruction  saved\n");
										}
										else
										{
											Serial.print("Maximum instructions reached\ninstruction not saved\n");
											continue;
										}
										trans.putInst('R');
										trans.putArg1(2);
										trans.putArg2(2);
										Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
										stor[instructionNum++].store(trans.encode());
										trans.putInst('L');
										trans.putArg1(arg1);
										trans.putArg2(90);
										Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
										stor[instructionNum++].store(trans.encode());
										trans.putInst('L');
										trans.putArg1(arg2);
										trans.putArg2(90);
										Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
										stor[instructionNum++].store(trans.encode());
									}
								}
								break;
								
								case 'P':		//polygon instruction
								{
									int arg1=Serial.parseInt();
									int arg2=Serial.parseInt();
									if(arg1<3||!trans.putArg2(arg2))
									{
										Serial.print("Arguments not Valid.\n");
										continue;
									}
									else if(arg1==arg2)
									{
										Serial.print("OK\n");
										if(instructionNum+1<MaxInstruc)
										{
											Serial.print("instruction  saved\n");
										}
										else
										{
											Serial.print("Maximum instructions reached\ninstruction not saved\n");
											continue;
										}
										trans.putInst('R');
										trans.putArg1(1);
										trans.putArg2(arg1);
										Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
										stor[instructionNum++].store(trans.encode());
										trans.putInst('L');
										trans.putArg1(arg2);
										trans.putArg2(360/arg1);
										Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
										stor[instructionNum++].store(trans.encode());
									}
								}
								break;
								
								case 'S':		//system commands (clear ,start and stop)
								case 'C':
								{
									command=String(reading)+Serial.readStringUntil(';');
									command=removeAllWhite(command);
									command.toUpperCase();
									if(command=="STOPREADING"||command=="STOP_READING")
									{
										flag=1;
										Serial.flush();
										Serial.print("leaving read mode.\n");
										continue;
									}
									else if(command=="START")
									{
										flag=1;
										reading='J';
                    goto starting;
										Serial.flush();
										Serial.print("leaving read mode.\n");
										continue;
									}
									
									else if(command=="CLEARALL")
									{
										instructionNum=0;
										currentIndex=0;
										Serial.print("clearing all instructions.\n");
										Serial.flush();
									}
									
									else if(command=="CLEARLAST")
									{
										instructionNum--;
										Serial.print("clearing last instruction.\n");
										Serial.flush();
									}
									
									else 
									{
											Serial.flush();
											Serial.print(command+" command not valid\n");
									}
								}
								break;

								case '\n':
								case '\0':
								case '\t':
								case '\r':
								case ';':
								case ' ':
								Serial.flush();
								continue;
								break;
								
								default:  //flushing the buffer for wrong commands
								{
									Serial.print(String(reading)+" command not valid\n");
									Serial.flush();
									while(Serial.available())Serial.read();
									reading='\0';
								}
								break;
							}
						}
					}
					
        break;
				
				case 'J' :    //Accurate driving mode
          starting:
					Serial.print("Starting Execution\n");
          while(currentIndex<instructionNum)
					{
						trans.putCode(stor[currentIndex++].aquire());
						trans.decodeit();
            Serial.print(String(trans.getInst())+String(trans.getArg1())+","+String(trans.getArg2())+";\n");
						execute(trans);
					}
					Serial.print("Execution completed.\n");
        break;
        
        
      }
    }
    
    
  }
  
}





